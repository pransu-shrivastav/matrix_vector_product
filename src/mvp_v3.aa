// matrix order.
$parameter MATRIX_ORDER 32
$parameter LOOP_ORDER 8
// storage for the matrix A
$storage A_MEM: $array [LOOP_ORDER][MATRIX_ORDER] $of $uint<32>
$storage B_MEM: $array [LOOP_ORDER][MATRIX_ORDER] $of $uint<32>
$storage C_MEM: $array [LOOP_ORDER][MATRIX_ORDER] $of $uint<32>
$storage D_MEM: $array [LOOP_ORDER][MATRIX_ORDER] $of $uint<32>

$storage PPSM: $array [MATRIX_ORDER] $of $uint<32>

// in-data pipe
$pipe in_data: $uint<32> $depth 2

// out-data pipe
$pipe out_data: $uint<32> $depth 2

// helper module for reading the matrix and
// populating the A array.
$module [readMatrix] $in () $out () $is
{
	$branchblock[mRead] {

			$merge $entry outer_loopback
				$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on outer_loopback
				$phi active_mem :=($bitcast ($uint <2>) 0) $on $entry next_active_memory $on outer_loopback
				$phi ia :=($bitcast ($uint<8>) 0 ) $on $entry nia $on outer_loopback
				$phi ib :=($bitcast ($uint<8>) 0 ) $on $entry nib $on outer_loopback
				$phi ic :=($bitcast ($uint<8>) 0 ) $on $entry nic $on outer_loopback
				$phi id :=($bitcast ($uint<8>) 0 ) $on $entry nid $on outer_loopback
			$endmerge
			nI := (I + 1)
			$volatile next_active_memory := ($mux (active_mem==0) 1
											($mux (active_mem==1) 2
		      			        			($mux (active_mem==2) 3 0)))
			
			$volatile nia := ($mux (active_mem==0) (ia+1) ia)
			$volatile nib := ($mux (active_mem==1) (ib+1) ib)
			$volatile nic := ($mux (active_mem==2) (ic+1) ic)
			$volatile nid := ($mux (active_mem==3) (id+1) id)
			
			$volatile aTrue := (active_mem==0)
			$volatile bTrue := (active_mem==1) 
			$volatile cTrue := (active_mem==2)
			$volatile dTrue := (active_mem==3)
			$branchblock [cRead]
			{
			$dopipeline $depth 7 $fullrate
			$merge $entry $loopback
				$phi J := ($bitcast ($uint<8>) 0) $on $entry nJ $on $loopback
			$endmerge
			nJ := (J + 1)
			aval := in_data
			$guard(aTrue)
					A_MEM[ia][J]:=aval
			$guard(bTrue) 
					B_MEM[ib][J]:=aval
			$guard(cTrue) 
					C_MEM[ic][J]:=aval
			$guard(dTrue)
					D_MEM[id][J]:=aval
			$while(nJ < MATRIX_ORDER) 
			}	
		$if (nI < MATRIX_ORDER) $then
				$place [outer_loopback]
		$endif
	}
}
$module [mem_init] $in () $out () $is
{
$branchblock [initloop] {
		$dopipeline $depth 8 $fullrate
			$merge $entry $loopback
				$phi J := ($bitcast ($uint<8>) 0) $on $entry nJ $on $loopback
			$endmerge 
			PPSM[J] := 0
			$rreport (mvp_unit initialising_memory J)
			nJ := (J + 1)
		$while (nJ < MATRIX_ORDER)
	}
}
$module [mvp_daemon] $in () $out () $is
{
	// read the matrix.
	$parallelblock[parinitrea]
	{
		$call readMatrix () ()
		$call mem_init () ()
	}
	$branchblock [loop] {
		$merge $entry loopback $endmerge
		$rreport(mvp_daemon branchblock_execution)
		$call mvp_unit () ()
		$place [loopback]
	}
}
$module [mvp_unit] $in() $out() $is
{

	$branchblock[fetchloop]
	{
		$merge $entry loopback_outer
				$phi C := ($bitcast($uint<8>) 0) $on $entry NC $on loopback_outer
				$phi x := in_data $on $entry in_data $on loopback_outer
		$endmerge
		$branchblock[productloop] 
		{
			$dopipeline $depth 8 $fullrate			
			$merge $entry $loopback
				$phi R := ($bitcast($uint<8>) 0) $on $entry NR $on $loopback
			$endmerge
			$rreport (mvp_unit mulitiplication x C R)
			NR := (R+4)
            R1 := (R+1)
            R2 := (R+2)
            R3 := (R+3)
			index := ( R >> 2 )
			p  := A_MEM[index][C] 
			pp := B_MEM[index][C] 
			ppp := C_MEM[index][C] 
			pppp := D_MEM[index][C]
			mp := PPSM[R]
			mp1 := PPSM[R1]
			mp2 := PPSM[R2]
			mp3 := PPSM[R3]
			PPSM[R]  :=(mp+ (p*x))
			PPSM[R1]  :=(mp1+ (pp*x))
			PPSM[R2]  :=(mp2+ (ppp*x))
			PPSM[R3]  :=(mp3+ (pppp*x))
			$while (NR < MATRIX_ORDER)
		}
		NC:=(C+1)
		$if(NC<MATRIX_ORDER) $then
		 	$place [loopback_outer]
		$endif	 
	}
	$branchblock [sendloop]
	{
		$dopipeline $depth 7 $fullrate
			$merge $entry $loopback
				$phi K := ($bitcast ($uint<8>) 0) $on $entry nK $on $loopback
			$endmerge 
			$rreport (mvp_unit sending_doutput K)
			out_data := PPSM[K]
			PPSM[K] := 0
			$volatile nK := (K + 1)
		$while (nK < MATRIX_ORDER)
	}
}

