// matrix order.
$parameter MATRIX_ORDER 	32
$constant ZERO_2: $uint<2> := 0
$constant ONE_2: $uint<2> := 1
$constant TWO_2: $uint<2> := 2
$constant THREE_2: $uint<2> := 3

// storage for the matrix A
$storage A_MEM: $array [MATRIX_ORDER][{MATRIX_ORDER/2}] $of $uint<32>
$storage B_MEM: $array [MATRIX_ORDER][{MATRIX_ORDER/2}] $of $uint<32>

// storage for input vector x
$storage x0: $array [{MATRIX_ORDER/2}] $of $uint<32>
$storage x1: $array [{MATRIX_ORDER/2}] $of $uint<32>

// in-data pipe
$pipe in_data: $uint<32> $depth 2

// out-data pipe
$pipe out_data: $uint<32> $depth 2

// helper module for reading the matrix and
// populating the A_MEM array.
$module [readMatrix] $in () $out () $is
{
	$branchblock[mRead] {

		$merge $entry outer_loopback
			$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on outer_loopback
		$endmerge


			nI := (I + 1) 

			$merge $entry inner_loopback
				$phi J := ($bitcast ($uint<8>) 0) $on $entry nJ $on inner_loopback
			$endmerge 
			nJ := (J + 1)

			$volatile odd_val := (J [] 0)
			Jr := ($slice J 7 1) // div by 2.

			aval := in_data
			$guard (odd_val)  B_MEM[I][Jr] := aval
			$guard (odd_val)
				$rreport (readMatrix_odd  odd_val I J Jr aval)

			$guard (~odd_val) A_MEM[I][Jr] := aval
			$guard (~odd_val)
				$rreport (readMatrix_even  even_val I J Jr aval)

			$if (nJ < MATRIX_ORDER) $then
				$place [inner_loopback]
			$endif
				
		$if (nI < MATRIX_ORDER) $then
				$place [outer_loopback]
		$endif
	}
}


// helper module which reads the vector x.
$module [readVector] $in () $out () $is
{
	$branchblock [loop] {
		$dopipeline $depth 7 $fullrate
			$merge $entry $loopback
				$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on $loopback
			$endmerge 
			
            $volatile i_val := (I [] 0)
			$volatile index := ($slice I 7 1)
			aval := in_data
			$guard (~i_val)
			    x0[index]:= aval
			$guard (~i_val)
				$rreport(readVector x0 aval i_val I index)
			$guard (i_val)
			    x1[index] := aval
			$guard (i_val)
				$rreport(readVector x1 aval i_val I index)
			$volatile nI := (I + 1)
		$while (nI < MATRIX_ORDER)
	}
}
// main module which performs A.x = y.
// assumes that A, x are available.
$module [multiplyMatrixVector] $in () $out () $is
{
	// dot product loop
	$branchblock[mmloop] {
		$merge $entry loopback 
			$phi R := ($bitcast ($uint<8>) 0) $on $entry nR $on loopback
		$endmerge

			$call dotP (R) (val)
            out_data := val
			$rreport(multiplyMatrixVector product_value R val )
			nR := (R + 1)
		$if (nR < MATRIX_ORDER) $then
			$place [loopback]
		$endif

	}
}

// dot product of the R'th row of A with the vector x.
// This gives the R'th element of Y.
$module [dotP] $in (R: $uint<8>) $out (result: $uint<32>) $is
{
	$branchblock[mmloop] {
		$dopipeline $depth 15 $fullrate
			$merge $entry $loopback 
				$phi C := ($bitcast ($uint<8>) 0) $on $entry nC $on $loopback
				$phi val_0 := ($bitcast ($uint<32>) 0) $on $entry nval_0 $on $loopback
                $phi val_1 := ($bitcast ($uint<32>) 0) $on $entry nval_1 $on $loopback
			$endmerge
			$volatile Index := ($slice C 7 1)
			a_rc_0 := A_MEM[R][Index]
            a_rc_1 := B_MEM[R][Index]
			$rreport (dotP matrixA_read a_rc_0 a_rc_1 Index)

            xval_0 := x0[Index]
            xval_1 := x1[Index]
            $rreport (dotP vectorX_read xval_0 xval_1 Index)

			$volatile nval_0 := (val_0 + (a_rc_0 * xval_0))
            $volatile nval_1 := (val_1 + (a_rc_1 * xval_1))
            $rreport (dotP multiplication nval_0 nval_1 )
			nC := (C + 2)
		$while (nC < MATRIX_ORDER)
	} (nval_0 => nval_0 nval_1 => nval_1 ) 
	result := (nval_0 + nval_1 )
}



//
// main thread: reads the matrix, and
// works on vectors..
//
$module [mvp_daemon] $in () $out () $is
{
	// read the matrix.
	$call readMatrix () ()
	$rreport(mvp_daemon done_readingA)
	$branchblock [loop] {
		$merge $entry loopback $endmerge
		$call readVector () ()
		$rreport(mvp_daemon done_readingX)
		$call multiplyMatrixVector () ()
	$place [loopback]
	}
}
